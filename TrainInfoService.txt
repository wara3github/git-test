# -*- coding: utf-8 -*-
import urllib2
import json

from java.net import URLEncoder
from java.util import UUID


class TrainInfoService:
    def __init__ (self, service_key, workspace):
        self.workspace = workspace
        self.service_key = service_key
    
    def _check_and_extract_body_(self, data):
        if data['response'] == None or data['response']['header'] == None or data['response']['header']['resultCode'] != "00":
            print('비정상 응답..')
            return None
        else:
            if data['response']['body']['items'] == None:
                return None
            else:
                return data['response']['body']

    def read_city_code(self):
        headers = {
        'Connection': 'keep-alive',
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
        }
        request = urllib2.Request('http://openapi.tago.go.kr/openapi/service/TrainInfoService/getCtyCodeList?ServiceKey=' + URLEncoder.encode(self.service_key)
                                  , headers=headers)
        response = urllib2.urlopen(request)
        return json.loads(response.read(), "utf-8")

    def read_vehicle_kind(self):
        headers = {
        'Connection': 'keep-alive',
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
        }
        request = urllib2.Request('http://openapi.tago.go.kr/openapi/service/TrainInfoService/getVhcleKndList?ServiceKey=' + URLEncoder.encode(self.service_key)
                                  , headers=headers)
        response = urllib2.urlopen(request)
        return json.loads(response.read(), "utf-8")
    
    
    def read_city_accto_train_sttn_list(self, citycode):
        headers = {
        'Connection': 'keep-alive',
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
        }
        ## 1000 개는 넘지 않는다는 가정하에 한번에 가져오기 위한 값으로 1000 을 설정..
        ## 나중에 시간있을 때 총 갯수 확인하여 for 문 돌도록  수정필요.
        request = urllib2.Request('http://openapi.tago.go.kr/openapi/service/TrainInfoService/getCtyAcctoTrainSttnList?numOfRows=1000&ServiceKey=' + URLEncoder.encode(self.service_key) + "&cityCode=" + URLEncoder.encode(citycode)
                                  , headers=headers)
        response = urllib2.urlopen(request)
        return json.loads(response.read(), "utf-8")
    
    
    def store_city_code(self, items):
        uuid = UUID.randomUUID().toString()
        f = open(self.workspace + "/" + 'store_city_code_' + uuid + ".csv",'a')
        
        for item in items:
            line = "%s,%s" % (item['cityname'], item['citycode'])
            f.write(line.encode('utf-8'))
            f.write("\n")
        f.flush()
        f.close()


    def store_vehicle_kind(self, items):
        uuid = UUID.randomUUID().toString()
        f = open(self.workspace + "/" + 'vehicle_kind_' + uuid + ".csv",'a')
        
        for item in items:
            line = "%s,%s" % (item['vehiclekndid'], item['vehiclekndnm'])
            f.write(line.encode('utf-8'))
            f.write("\n")
        f.flush()
        f.close()
        
    def store_city_code_train_info_map(self, itemMaps):
        print(itemMaps)
        uuid = UUID.randomUUID().toString()
        f = open(self.workspace + "/" + "city_code_train_info_map" + uuid + ".csv", "a")

        for key , values in itemMaps.items():
            for _map_items in values:
                line = "%s,%s,%s" % (str(key),_map_items['nodename'], _map_items['nodeid'])
                f.write(line.encode('utf-8'))
                f.write("\n")
        f.flush()
        f.close()


    def do_collect_city_code(self):
        data = self.read_city_code()
        body = self._check_and_extract_body_(data)
        self.store_city_code(body['items']['item'])
        

    def do_collect_vehicle_kind(self):
        data = self.read_vehicle_kind()
        body = self._check_and_extract_body_(data)
        self.store_vehicle_kind(body['items']['item'])

    def do_collect_city_code_station_list_map(self):
        __CITY_CODE_TRAIN_INFO_MAP__ = {}
        data = self.read_city_code()
        body = self._check_and_extract_body_(data)
        for item in body['items']['item']:
            res = self.read_city_accto_train_sttn_list(str(item['citycode']))
            __BODY__ = self._check_and_extract_body_(res)
            __CITY_CODE_TRAIN_INFO_MAP__[str(item['citycode'])] = [] if int(__BODY__['totalCount']) <= 0  else __BODY__['items']['item']
        self.store_city_code_train_info_map(__CITY_CODE_TRAIN_INFO_MAP__)


        
if __name__ == "__main__":
    _train_info_service = TrainInfoService("CrreajDDY5cpb0acvuG1nkRYJBva2Dx6Vxmti+RY2OJFCqBkyY8/kt8JTMygQxRbZpLwmp+RZHcHmZKTVdKi8w==", "C:/__WORKSPACE__/DIAMOND-E/ETL/KO/SFTP_UPLOADED_DATA")
    _train_info_service.do_collect_city_code_station_list_map()
     
         #self.store_city_code_train_info_map(__CITY_CODE_TRAIN_INFO_MAP__)